#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (phil_num + 4) % 5
#define RIGHT (phil_num + 1) % 5

int state[5];
int phil[5] = {0, 1, 2, 3, 4};
pthread_mutex_t lock;
pthread_cond_t cond[5];

void test(int phil_num)
{
    if (state[phil_num] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
    {
        state[phil_num] = EATING;
        printf("Philosopher %d takes fork %d and %d\n", phil_num + 1, LEFT + 1, phil_num + 1);
        printf("Philosopher %d is Eating\n", phil_num + 1);
        pthread_cond_signal(&cond[phil_num]);
    }
}

void take_fork(int phil_num)
{
    pthread_mutex_lock(&lock);
    state[phil_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n", phil_num + 1);
    test(phil_num);
    pthread_cond_wait(&cond[phil_num], &lock);
    pthread_mutex_unlock(&lock);
}

void put_fork(int phil_num)
{
    pthread_mutex_lock(&lock);
    state[phil_num] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n", phil_num + 1, LEFT + 1, phil_num + 1);
    printf("Philosopher %d is thinking\n", phil_num + 1);
    test(LEFT);
    test(RIGHT);
    pthread_mutex_unlock(&lock);
}

void* philospher(void* num)
{
    int* i = num;
    while (1)
    {
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    }
}

int main()
{
    int i;
    pthread_t thread_id[5];
    pthread_mutex_init(&lock, NULL);
    for (i = 0; i < 5; i++)
        pthread_cond_init(&cond[i], NULL);
    for (i = 0; i < 5; i++)
    {
        pthread_create(&thread_id[i], NULL, philospher, &phil[i]);
        printf("Philosopher %d is thinking\n", i + 1);
    }
    for (i = 0; i < 5; i++)
        pthread_join(thread_id[i], NULL);
}
